/* SPDX-License-Identifier: LGPL-3.0-or-later */
/* Copyright (C) 2023 Intel Corporation */

/*
 * It is not explicitly specified in TDX GHCI description of TDX.VP.VMCALL<GetQuote>, but the "Data"
 * field in the shared memory region has the following input format:
 *
 *   - offset 0B, size 4B, big-endian:  size of qgs_msg_get_quote_req_t object
 *   - offset 4B:                       qgs_msg_get_quote_req_t object
 *
 * Similarly, the output format:
 *
 *   - offset 0B, size 4B, big-endian:  size of qgs_msg_get_quote_resp_t object
 *   - offset 4B:                       qgs_msg_get_quote_resp_t object
 *
 * For sample code, see `/QuoteGeneration/quote_wrapper/qgs/qgs_msg_lib/` files in
 * https://github.com/intel/SGXDataCenterAttestationPrimitives (v1.16+).
 */

#pragma once

#include <stdint.h>

/*
 * Below structs are taken from:
 * https://github.com/intel/SGXDataCenterAttestationPrimitives/blob/dcap_1.16_reproducible/
 *         QuoteGeneration/quote_wrapper/qgs_msg_lib/inc/qgs_msg_lib.h#L82
 */

#define TDX_GET_QUOTE_DATA_HEADER_SIZE 4

#define QGS_MSG_LIB_MAJOR_VER 1
#define QGS_MSG_LIB_MINOR_VER 0

#ifndef QGS_MSG_MK_ERROR
#define QGS_MSG_MK_ERROR(x) (0x00012000 | (x))
#endif

#pragma pack(push, 1)
/* Possible errors generated by the qgs message library. */
typedef enum _qgs_msg_error_t {
    /* Success */
    QGS_MSG_SUCCESS = 0x0000,
    /* Unexpected error */
    QGS_MSG_ERROR_UNEXPECTED = QGS_MSG_MK_ERROR(0x0001),
    /* Not enough memory is available to complete this operation */
    QGS_MSG_ERROR_OUT_OF_MEMORY = QGS_MSG_MK_ERROR(0x0002),
    /* The parameter is incorrect */
    QGS_MSG_ERROR_INVALID_PARAMETER = QGS_MSG_MK_ERROR(0x0003),
    /* Unrecognized version of serialized data */
    QGS_MSG_ERROR_INVALID_VERSION = QGS_MSG_MK_ERROR(0x0004),
    /* Invalid message type found */
    QGS_MSG_ERROR_INVALID_TYPE = QGS_MSG_MK_ERROR(0x0005),
    /* Invalid message size found */
    QGS_MSG_ERROR_INVALID_SIZE = QGS_MSG_MK_ERROR(0x0006),
   /* Invalid error code */
    QGS_MSG_ERROR_INVALID_CODE = QGS_MSG_MK_ERROR(0x0007),

    QGS_MSG_ERROR_MAX,
} qgs_msg_error_t;

typedef enum _qgs_msg_type_t {
    GET_QUOTE_REQ = 0,
    GET_QUOTE_RESP = 1,
    GET_COLLATERAL_REQ = 2,
    GET_COLLATERAL_RESP = 3,
    QGS_MSG_TYPE_MAX
} qgs_msg_type_t;

typedef struct _qgs_msg_header_t {
    uint16_t major_version;
    uint16_t minor_version;
    uint32_t type;
    uint32_t size;              /* size of the whole message, including this header, in bytes */
    uint32_t error_code;        /* used in response only */
} qgs_msg_header_t;

typedef struct _qgs_msg_get_quote_req_t {
    qgs_msg_header_t header;    /* header.type = GET_QUOTE_REQ */
    uint32_t report_size;       /* cannot be 0 */
    uint32_t id_list_size;      /* length of id_list, in bytes, currently always 0 */
    uint8_t report_id_list[];   /* report followed by id list */
} qgs_msg_get_quote_req_t;

typedef struct _qgs_msg_get_quote_resp_s {
    qgs_msg_header_t header;    /* header.type = GET_QUOTE_RESP */
    uint32_t selected_id_size;  /* can be 0 in case only one id is sent in request */
    uint32_t quote_size;        /* length of quote_data, in bytes */
    uint8_t id_quote[];         /* selected id followed by quote */
} qgs_msg_get_quote_resp_t;

/* NOTE: collaterals are unused currently */
typedef struct _qgs_msg_get_collateral_req_t {
    qgs_msg_header_t header;    /* header.type = GET_COLLATERAL_REQ */
    uint32_t fsmpc_size;
    uint32_t pckca_size;
    uint8_t fsmpc_pckca[];
} qgs_msg_get_collateral_req_t;

typedef struct _qgs_msg_get_collateral_resp_s {
    qgs_msg_header_t header;    /* header.type = GET_COLLATERAL_RESP */
    uint16_t major_version;
    uint16_t minor_version;
    uint32_t pck_crl_issuer_chain_size;
    uint32_t root_ca_crl_size;
    uint32_t pck_crl_size;
    uint32_t tcb_info_issuer_chain_size;
    uint32_t tcb_info_size;
    uint32_t qe_identity_issuer_chain_size;
    uint32_t qe_identity_size;
    uint8_t collaterals[];
} qgs_msg_get_collateral_resp_t;

#pragma pack(pop)
