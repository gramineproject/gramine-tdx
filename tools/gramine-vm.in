#!/usr/bin/env bash
# SPDX-License-Identifier: LGPL-3.0-or-later
# Copyright (C) 2023 Intel Corporation

# This file is based on `gramine.in` and modified for VM/TDX environment and QEMU.

BIOS_PATH=@BIOS_PATH@
LIBPAL_PATH=@LIBPAL_PATH@
HOST_PAL_PATH=@HOST_PAL_PATH@
TDSHIM_PAL_PATH=@TDSHIM_PAL_PATH@

APPLICATION=
QEMU_GDB=
ENVS=()
PREFIX=()

if [ "$GDB" == "1" ]; then
    QEMU_GDB="-gdb tcp::9000 -S"
fi

while [ "$1" != "" ];
do
    if [ "$APPLICATION" == "" ]; then
        APPLICATION=$1
        shift
        continue
    fi

    break
done

if [ "$APPLICATION" == "" ]; then
    echo "Usage: $0 [<application>] <args>..."
    exit 2
fi

# Try to get the VM memory config from `.manifest.tdx` file, by parsing `tdx.enclave_size` value.
# If this fails, try alternatively with `.manifest.sgx` and `sgx.enclave_size`
#
# We enforce a 1GB lower limit for VM memory because (a) Gramine VM kernel reserves ~512MB for
# shared virtio-queues memory, page tables, PAL binary, etc. and (b) for simplicity we want to reuse
# already-existing SGX manifests, thus we don't want to bump `sgx.enclave_size` to 1GB explicitly.
export GRAMINE_MANIFEST=$APPLICATION.manifest
QEMU_MEM_SIZE=$(python3 -c "
import os
import re
import sys
from graminelibos import Manifest

manifests = {
    'tdx': os.environ['GRAMINE_MANIFEST'] + '.tdx',
    'sgx': os.environ['GRAMINE_MANIFEST'] + '.sgx',
}

size_str = ''
for type, file in manifests.items():
    try:
        with open(file, 'rb') as f:
            manifest_data = f.read()
        manifest = Manifest.loads(manifest_data.decode('utf-8'))
        size_str = manifest[type]['enclave_size']
        break
    except Exception:
        continue
else:
    sys.exit(1)

unit = 1
if size_str.endswith('G'):
    unit = 1024 * 1024 * 1024
elif size_str.endswith('M'):
    unit = 1024 * 1024
elif size_str.endswith('K'):
    unit = 1024

try:
    size = int(re.search(r'\d+', size_str).group())
    print(size_str if unit * size > 1024 * 1024 * 1024 else '1G')
except Exception:
    sys.exit(1)
")
# If file parsing fails, then try the config from environment variable `GRAMINE_RAM_SIZE`.
QEMU_MEM_SIZE=${QEMU_MEM_SIZE:-$GRAMINE_RAM_SIZE}
# If both file and envvar parsing fail, then fall back to the default value of 8GB.
QEMU_MEM_SIZE=${QEMU_MEM_SIZE:-"8G"}

# Try the config from environment variable `GRAMINE_CPU_NUM`, then fall back to default of 1.
QEMU_CPU_NUM=${QEMU_CPU_NUM:-$GRAMINE_CPU_NUM}
QEMU_CPU_NUM=${QEMU_CPU_NUM:-"1"}

QEMU_PATH="qemu"
QEMU_VM="-cpu host,host-phys-bits,-kvm-steal-time,pmu=off,+tsc-deadline,+invtsc \
    -m $QEMU_MEM_SIZE -smp $QEMU_CPU_NUM"
QEMU_OPTS="-enable-kvm -vga none -nographic -no-reboot -monitor chardev:mux -no-hpet \
    -object memory-backend-file,id=mem,size=$QEMU_MEM_SIZE,mem-path=/dev/shm,share=on \
    -numa node,memdev=mem"

if [ "$TDSHIM_PAL_PATH" == "" ]; then
QEMU_MACHINE="-M q35,kernel_irqchip=split"
QEMU_BINARIES="-kernel $LIBPAL_PATH -device loader,file=$BIOS_PATH"
else
QEMU_MACHINE="-M q35,kernel_irqchip=split,confidential-guest-support=tdx \
    -object tdx-guest,id=tdx,quote-generation-service=vsock:2:4050"
QEMU_BINARIES="-bios $TDSHIM_PAL_PATH"
fi

QEMU_VIRTIO_CONSOLE="-device virtio-serial,iommu_platform=off,romfile= \
                     -chardev stdio,id=mux,mux=on \
                     -device virtconsole,chardev=mux -serial chardev:mux"
QEMU_VIRTIO_FS="-chardev socket,path=/tmp/vhostfs,id=vhostfs \
                -device vhost-user-fs-pci,iommu_platform=off,queue-size=1024,chardev=vhostfs,tag=graminefs"
QEMU_VIRTIO_VSOCK="-device vhost-vsock-pci,iommu_platform=off,guest-cid=10,id=vsockdev"

# Due to QEMU syntax, commas in the QEMU cmdline need to be escaped using an additional comma.
APPLICATION=${APPLICATION//","/",,"}
GRAMINE_ARGS="-gramine-args init \"$APPLICATION\" $@ -gramine-args-end"

GRAMINE_ENVS=$(python3 -c "
import os
env_str = ''
for name, value in os.environ.items():
    env_str += ('\"{0}={1}\" '.format(name, value).replace(',', ',,'))
print(env_str)
")
GRAMINE_ENVS="-gramine-envs $GRAMINE_ENVS -gramine-envs-end"

CMD=("${ENVS[@]}")
CMD+=("${PREFIX[@]}")
CMD+=($QEMU_PATH $QEMU_GDB $QEMU_VM $QEMU_OPTS $QEMU_MACHINE \
        $QEMU_VIRTIO_CONSOLE $QEMU_VIRTIO_FS $QEMU_VIRTIO_VSOCK $QEMU_BINARIES \
        -fw_cfg name=opt/gramine/pwd,string="$PWD" \
        -fw_cfg name=opt/gramine/args,string="$GRAMINE_ARGS" \
        -fw_cfg name=opt/gramine/envs,string="$GRAMINE_ENVS" \
        -fw_cfg name=opt/gramine/unixtime_s,string="$EPOCHSECONDS")

virtiofsd --socket-path /tmp/vhostfs --shared-dir / --log-level error \
    --sandbox none --no-announce-submounts &
while [ ! -e /tmp/vhostfs ]; do sleep 0.1; done;

exec env "${CMD[@]}"
